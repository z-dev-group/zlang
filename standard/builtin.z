fn is_int(variable) {
  return typeof(variable) == "integer"
}

fn is_string(variable) {
  return typeof(variable) == "string"
}

fn is_bool(variable) {
  return typeof(variable) == "boolean"
}

fn is_error(variable) {
  return typeof(variable) == "error"
}

fn is_float(variable) {
  return typeof(variable) == "float"
}

fn is_null(variable) {
  return typeof(variable) == "null"
}

fn is_object(variable) {
  return typeof(variable) == "object"
}

fn is_array(variable) {
  return typeof(variable) == "array"
}

fn var_dump(variable) {
  puts(variable, "\n")
}

let builtin_upper_letter_to_int_map = {
  "A": 65, 
  "B": 66,
  "C": 67, 
  "D": 68, 
  "E": 69, 
  "F": 70, 
  "G": 71, 
  "H": 72, 
  "I": 73, 
  "J": 74, 
  "K": 75, 
  "L": 76, 
  "M": 77, 
  "N": 78, 
  "O": 79, 
  "P": 80, 
  "Q": 81, 
  "R": 82,
  "S": 83, 
  "T": 84, 
  "U": 85,
  "V": 86, 
  "W": 87, 
  "X": 88, 
  "Y": 89, 
  "Z": 90
}

let builtin_int_to_upper_letter_map = {
  65: "A", 
  66: "B",
  67: "C", 
  68: "D", 
  69: "E", 
  70: "F", 
  71: "G", 
  72: "H", 
  73: "I", 
  74: "J", 
  75: "K", 
  76: "L", 
  77: "M", 
  78: "N", 
  79: "O", 
  80: "P", 
  81: "Q", 
  82: "R",
  83: "S", 
  84: "T", 
  85: "U",
  86: "V", 
  87: "W", 
  88: "X", 
  89: "Y", 
  90: "Z"
}

let builtin_lower_letter_to_int_map = {
  "a": 97, 
  "b": 98,
  "c": 99, 
  "d": 100, 
  "e": 101, 
  "f": 102, 
  "g": 103, 
  "h": 104, 
  "i": 105, 
  "j": 106, 
  "k": 107, 
  "l": 108, 
  "m": 109, 
  "n": 110, 
  "o": 111, 
  "p": 112, 
  "q": 113, 
  "r": 114,
  "s": 115, 
  "t": 116, 
  "u": 117,
  "v": 118, 
  "w": 119, 
  "x": 120, 
  "y": 121, 
  "z": 122
}

let builtin_int_to_lower_letter_map = {
  97: "a", 
  98: "b",
  99: "c", 
  100: "d", 
  101: "e", 
  102: "f", 
  103: "g", 
  104: "h", 
  105: "i", 
  106: "j", 
  107: "k", 
  108: "l", 
  109: "m", 
  110: "n", 
  111: "o", 
  112: "p", 
  113: "q", 
  114: "r",
  115: "s", 
  116: "t", 
  117: "u",
  118: "v", 
  119: "w", 
  120: "x", 
  121: "y", 
  122: "z"
}

fn char_to_int(variable) {
  let int = builtin_lower_letter_to_int_map[variable]
  if (is_null(int)) {
    int = builtin_upper_letter_to_int_map[variable];
  }
  if (is_null(int)) {
    return -1;
  }
  return int
}

fn char_to_upper(variable) {
  let int = char_to_int(variable)
  if (int == -1) {
    return variable
  }
  int = int - 32
  let string = builtin_int_to_upper_letter_map[int]
  if (is_null(string)) {
    return variable
  } else {
    return string
  }
}

fn char_to_lower(variable) {
  let int = char_to_int(variable)
  if (int == -1) {
    return variable
  }
  int = int + 32
  let string = builtin_int_to_lower_letter_map[int]
  if (is_null(string)) {
    return variable
  } else {
    return string
  }
}

fn first(arr) {
  if (!is_array(arr)) {
    return with_error("", "arr should be array")
  }
  if(len(arr) == 0) {
    return with_error("", "arr len should more than one")
  }
  return arr[0]
}

fn last(arr) {
  if (!is_array(arr)) {
    return with_error("", "arr should be array")
  }
  if(len(arr) == 0) {
    return with_error("", "arr len should more than one")
  }
  return arr[len(arr) - 1]
}

fn rest(arr) {
  if (!is_array(arr)) {
    return with_error("", "arr should be array")
  }
  if(len(arr) == 0) {
    return with_error("", "arr len should more than one")
  }
  let newArr = []
  for (let i = 1; i < len(arr); i++) {
    newArr = push(newArr, arr[i])
  }
  return newArr
}